/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseReportInsertResponse,
  ApiResponseReportPageResponse,
  ApiResponseReportProcessResponse,
  ApiResponseString,
  Pageable,
  ReportProcessRequest,
  ReportRequest,
} from '../models/index';

export interface AddReportRequest {
    memberId: number;
    reportRequest: ReportRequest;
}

export interface DeleteReportedPostRequest {
    reportId: number;
}

export interface GetReportListRequest {
    pageable: Pageable;
    reportedMemberKeyword?: string;
    reporterKeyword?: string;
    contentKeyword?: string;
    reportPaths?: Array<GetReportListReportPathsEnum>;
    reportTypes?: Array<number>;
    startDate?: string;
    endDate?: string;
    reportCountMin?: number;
    reportCountMax?: number;
    reportCountExact?: number;
    isDeleted?: boolean;
    banTypes?: Array<GetReportListBanTypesEnum>;
    sortOrder?: GetReportListSortOrderEnum;
}

export interface ProcessReportRequest {
    reportId: number;
    reportProcessRequest: ReportProcessRequest;
}

/**
 * ReportApi - interface
 * 
 * @export
 * @interface ReportApiInterface
 */
export interface ReportApiInterface {
    /**
     * 대상 회원에 대한 신고를 등록하는 API 입니다.
     * @summary 신고 등록 API
     * @param {number} memberId 신고할 대상 회원의 id 입니다.
     * @param {ReportRequest} reportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApiInterface
     */
    addReportRaw(requestParameters: AddReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportInsertResponse>>;

    /**
     * 대상 회원에 대한 신고를 등록하는 API 입니다.
     * 신고 등록 API
     */
    addReport(requestParameters: AddReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportInsertResponse>;

    /**
     * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\" 
     * @summary 신고된 게시글 삭제 (관리자 전용)
     * @param {number} reportId 삭제할 게시글과 연관된 신고의 ID입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApiInterface
     */
    deleteReportedPostRaw(requestParameters: DeleteReportedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\" 
     * 신고된 게시글 삭제 (관리자 전용)
     */
    deleteReportedPost(requestParameters: DeleteReportedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10 
     * @summary 신고 목록 조회 (관리자 전용)
     * @param {Pageable} pageable 
     * @param {string} [reportedMemberKeyword] 
     * @param {string} [reporterKeyword] 
     * @param {string} [contentKeyword] 
     * @param {Array<'BOARD' | 'CHAT' | 'PROFILE'>} [reportPaths] 
     * @param {Array<number>} [reportTypes] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {number} [reportCountMin] 
     * @param {number} [reportCountMax] 
     * @param {number} [reportCountExact] 
     * @param {boolean} [isDeleted] 
     * @param {Array<'NONE' | 'WARNING' | 'BAN_1D' | 'BAN_3D' | 'BAN_5D' | 'BAN_1W' | 'BAN_2W' | 'BAN_1M' | 'PERMANENT'>} [banTypes] 
     * @param {'LATEST' | 'OLDEST'} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApiInterface
     */
    getReportListRaw(requestParameters: GetReportListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportPageResponse>>;

    /**
     * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10 
     * 신고 목록 조회 (관리자 전용)
     */
    getReportList(requestParameters: GetReportListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportPageResponse>;

    /**
     * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항) 
     * @summary 신고 처리 (관리자 전용)
     * @param {number} reportId 처리할 신고의 ID입니다.
     * @param {ReportProcessRequest} reportProcessRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApiInterface
     */
    processReportRaw(requestParameters: ProcessReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportProcessResponse>>;

    /**
     * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항) 
     * 신고 처리 (관리자 전용)
     */
    processReport(requestParameters: ProcessReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportProcessResponse>;

}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI implements ReportApiInterface {

    /**
     * 대상 회원에 대한 신고를 등록하는 API 입니다.
     * 신고 등록 API
     */
    async addReportRaw(requestParameters: AddReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportInsertResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling addReport.');
        }

        if (requestParameters.reportRequest === null || requestParameters.reportRequest === undefined) {
            throw new runtime.RequiredError('reportRequest','Required parameter requestParameters.reportRequest was null or undefined when calling addReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/report/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reportRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 회원에 대한 신고를 등록하는 API 입니다.
     * 신고 등록 API
     */
    async addReport(requestParameters: AddReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportInsertResponse> {
        const response = await this.addReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\" 
     * 신고된 게시글 삭제 (관리자 전용)
     */
    async deleteReportedPostRaw(requestParameters: DeleteReportedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling deleteReportedPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/report/{reportId}/post`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\" 
     * 신고된 게시글 삭제 (관리자 전용)
     */
    async deleteReportedPost(requestParameters: DeleteReportedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.deleteReportedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10 
     * 신고 목록 조회 (관리자 전용)
     */
    async getReportListRaw(requestParameters: GetReportListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportPageResponse>> {
        if (requestParameters.pageable === null || requestParameters.pageable === undefined) {
            throw new runtime.RequiredError('pageable','Required parameter requestParameters.pageable was null or undefined when calling getReportList.');
        }

        const queryParameters: any = {};

        if (requestParameters.reportedMemberKeyword !== undefined) {
            queryParameters['reportedMemberKeyword'] = requestParameters.reportedMemberKeyword;
        }

        if (requestParameters.reporterKeyword !== undefined) {
            queryParameters['reporterKeyword'] = requestParameters.reporterKeyword;
        }

        if (requestParameters.contentKeyword !== undefined) {
            queryParameters['contentKeyword'] = requestParameters.contentKeyword;
        }

        if (requestParameters.reportPaths) {
            queryParameters['reportPaths'] = requestParameters.reportPaths;
        }

        if (requestParameters.reportTypes) {
            queryParameters['reportTypes'] = requestParameters.reportTypes;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.reportCountMin !== undefined) {
            queryParameters['reportCountMin'] = requestParameters.reportCountMin;
        }

        if (requestParameters.reportCountMax !== undefined) {
            queryParameters['reportCountMax'] = requestParameters.reportCountMax;
        }

        if (requestParameters.reportCountExact !== undefined) {
            queryParameters['reportCountExact'] = requestParameters.reportCountExact;
        }

        if (requestParameters.isDeleted !== undefined) {
            queryParameters['isDeleted'] = requestParameters.isDeleted;
        }

        if (requestParameters.banTypes) {
            queryParameters['banTypes'] = requestParameters.banTypes;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.pageable !== undefined) {
            queryParameters['pageable'] = requestParameters.pageable;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/report/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10 
     * 신고 목록 조회 (관리자 전용)
     */
    async getReportList(requestParameters: GetReportListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportPageResponse> {
        const response = await this.getReportListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항) 
     * 신고 처리 (관리자 전용)
     */
    async processReportRaw(requestParameters: ProcessReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReportProcessResponse>> {
        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling processReport.');
        }

        if (requestParameters.reportProcessRequest === null || requestParameters.reportProcessRequest === undefined) {
            throw new runtime.RequiredError('reportProcessRequest','Required parameter requestParameters.reportProcessRequest was null or undefined when calling processReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/report/{reportId}/process`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reportProcessRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항) 
     * 신고 처리 (관리자 전용)
     */
    async processReport(requestParameters: ProcessReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReportProcessResponse> {
        const response = await this.processReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetReportListReportPathsEnum {
    Board = 'BOARD',
    Chat = 'CHAT',
    Profile = 'PROFILE'
}
/**
  * @export
  * @enum {string}
  */
export enum GetReportListBanTypesEnum {
    None = 'NONE',
    Warning = 'WARNING',
    Ban1D = 'BAN_1D',
    Ban3D = 'BAN_3D',
    Ban5D = 'BAN_5D',
    Ban1W = 'BAN_1W',
    Ban2W = 'BAN_2W',
    Ban1M = 'BAN_1M',
    Permanent = 'PERMANENT'
}
/**
  * @export
  * @enum {string}
  */
export enum GetReportListSortOrderEnum {
    Latest = 'LATEST',
    Oldest = 'OLDEST'
}
