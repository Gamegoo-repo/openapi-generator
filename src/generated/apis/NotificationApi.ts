/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseInteger,
  ApiResponseNotificationCursorListResponse,
  ApiResponseNotificationPageListResponse,
  ApiResponseReadNotificationResponse,
} from '../models/index';

export interface GetNotificationListByCursorRequest {
    cursor?: number;
}

export interface GetNotificationListByPageRequest {
    page: number;
}

export interface ReadNotificationRequest {
    notificationId: number;
}

/**
 * NotificationApi - interface
 * 
 * @export
 * @interface NotificationApiInterface
 */
export interface NotificationApiInterface {
    /**
     * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
     * @summary 알림 팝업 목록 조회 API
     * @param {number} [cursor] 페이징을 위한 커서, Long 타입 notificationId를 보내주세요. 보내지 않으면 가장 최근 알림 10개를 조회합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    getNotificationListByCursorRaw(requestParameters: GetNotificationListByCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseNotificationCursorListResponse>>;

    /**
     * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 팝업 목록 조회 API
     */
    getNotificationListByCursor(requestParameters: GetNotificationListByCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseNotificationCursorListResponse>;

    /**
     * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
     * @summary 알림 전체 목록 조회 API
     * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    getNotificationListByPageRaw(requestParameters: GetNotificationListByPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseNotificationPageListResponse>>;

    /**
     * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 전체 목록 조회 API
     */
    getNotificationListByPage(requestParameters: GetNotificationListByPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseNotificationPageListResponse>;

    /**
     * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
     * @summary 안읽은 알림 개수 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    getUnreadNotificationCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseInteger>>;

    /**
     * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
     * 안읽은 알림 개수 조회 API
     */
    getUnreadNotificationCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseInteger>;

    /**
     * 특정 알림을 읽음 처리하는 API 입니다.
     * @summary 알림 읽음 처리 API
     * @param {number} notificationId 읽음 처리할 알림의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    readNotificationRaw(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReadNotificationResponse>>;

    /**
     * 특정 알림을 읽음 처리하는 API 입니다.
     * 알림 읽음 처리 API
     */
    readNotification(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReadNotificationResponse>;

}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI implements NotificationApiInterface {

    /**
     * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 팝업 목록 조회 API
     */
    async getNotificationListByCursorRaw(requestParameters: GetNotificationListByCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseNotificationCursorListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/notification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 팝업 목록 조회 API
     */
    async getNotificationListByCursor(requestParameters: GetNotificationListByCursorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseNotificationCursorListResponse> {
        const response = await this.getNotificationListByCursorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 전체 목록 조회 API
     */
    async getNotificationListByPageRaw(requestParameters: GetNotificationListByPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseNotificationPageListResponse>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getNotificationListByPage.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/notification/total`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
     * 알림 전체 목록 조회 API
     */
    async getNotificationListByPage(requestParameters: GetNotificationListByPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseNotificationPageListResponse> {
        const response = await this.getNotificationListByPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
     * 안읽은 알림 개수 조회 API
     */
    async getUnreadNotificationCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseInteger>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/notification/unread/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
     * 안읽은 알림 개수 조회 API
     */
    async getUnreadNotificationCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseInteger> {
        const response = await this.getUnreadNotificationCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * 특정 알림을 읽음 처리하는 API 입니다.
     * 알림 읽음 처리 API
     */
    async readNotificationRaw(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseReadNotificationResponse>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling readNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/notification/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 알림을 읽음 처리하는 API 입니다.
     * 알림 읽음 처리 API
     */
    async readNotification(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseReadNotificationResponse> {
        const response = await this.readNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
