/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseString,
  EmailCodeRequest,
  EmailRequest,
} from '../models/index';

export interface SendEmailRequest {
    emailRequest: EmailRequest;
}

export interface SendEmailWithCheckDuplicationRequest {
    emailRequest: EmailRequest;
}

export interface VerifyEmailRequest {
    emailCodeRequest: EmailCodeRequest;
}

/**
 * EmailApi - interface
 * 
 * @export
 * @interface EmailApiInterface
 */
export interface EmailApiInterface {
    /**
     * API for sending email for finding password
     * @summary 비밀번호 찾기용 이메일 인증코드 전송 API 입니다.
     * @param {EmailRequest} emailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    sendEmailRaw(requestParameters: SendEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for sending email for finding password
     * 비밀번호 찾기용 이메일 인증코드 전송 API 입니다.
     */
    sendEmail(requestParameters: SendEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for sending email for join
     * @summary 회원가입용 이메일 인증코드 전송 API 입니다. 중복확인 포함
     * @param {EmailRequest} emailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    sendEmailWithCheckDuplicationRaw(requestParameters: SendEmailWithCheckDuplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for sending email for join
     * 회원가입용 이메일 인증코드 전송 API 입니다. 중복확인 포함
     */
    sendEmailWithCheckDuplication(requestParameters: SendEmailWithCheckDuplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for verifying email
     * @summary 이메일 인증코드 검증 API 입니다.
     * @param {EmailCodeRequest} emailCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    verifyEmailRaw(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for verifying email
     * 이메일 인증코드 검증 API 입니다.
     */
    verifyEmail(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

}

/**
 * 
 */
export class EmailApi extends runtime.BaseAPI implements EmailApiInterface {

    /**
     * API for sending email for finding password
     * 비밀번호 찾기용 이메일 인증코드 전송 API 입니다.
     */
    async sendEmailRaw(requestParameters: SendEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.emailRequest === null || requestParameters.emailRequest === undefined) {
            throw new runtime.RequiredError('emailRequest','Required parameter requestParameters.emailRequest was null or undefined when calling sendEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/email/send/pwd`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.emailRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for sending email for finding password
     * 비밀번호 찾기용 이메일 인증코드 전송 API 입니다.
     */
    async sendEmail(requestParameters: SendEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.sendEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for sending email for join
     * 회원가입용 이메일 인증코드 전송 API 입니다. 중복확인 포함
     */
    async sendEmailWithCheckDuplicationRaw(requestParameters: SendEmailWithCheckDuplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.emailRequest === null || requestParameters.emailRequest === undefined) {
            throw new runtime.RequiredError('emailRequest','Required parameter requestParameters.emailRequest was null or undefined when calling sendEmailWithCheckDuplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/email/send/join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.emailRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for sending email for join
     * 회원가입용 이메일 인증코드 전송 API 입니다. 중복확인 포함
     */
    async sendEmailWithCheckDuplication(requestParameters: SendEmailWithCheckDuplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.sendEmailWithCheckDuplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for verifying email
     * 이메일 인증코드 검증 API 입니다.
     */
    async verifyEmailRaw(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.emailCodeRequest === null || requestParameters.emailCodeRequest === undefined) {
            throw new runtime.RequiredError('emailCodeRequest','Required parameter requestParameters.emailCodeRequest was null or undefined when calling verifyEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/email/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.emailCodeRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for verifying email
     * 이메일 인증코드 검증 API 입니다.
     */
    async verifyEmail(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.verifyEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
