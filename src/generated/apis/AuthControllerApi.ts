/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseLoginResponse,
  ApiResponseRefreshTokenResponse,
  ApiResponseString,
  JoinRequest,
  LoginRequest,
  RefreshTokenRequest,
} from '../models/index';

export interface GetTestAccessTokenRequest {
    memberId: number;
}

export interface JoinOperationRequest {
    joinRequest: JoinRequest;
}

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

export interface UpdateTokenRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

/**
 * AuthControllerApi - interface
 * 
 * @export
 * @interface AuthControllerApiInterface
 */
export interface AuthControllerApiInterface {
    /**
     * API for Blinding Member
     * @summary 탈퇴 API입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    blindMemberRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for Blinding Member
     * 탈퇴 API입니다.
     */
    blindMember(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
     * @summary 임시 access token 발급 API
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    getTestAccessTokenRaw(requestParameters: GetTestAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
     * 임시 access token 발급 API
     */
    getTestAccessToken(requestParameters: GetTestAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 회원가입 API입니다.
     * @summary 회원가입
     * @param {JoinRequest} joinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    joinRaw(requestParameters: JoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 회원가입 API입니다.
     * 회원가입
     */
    join(requestParameters: JoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 로그인 API입니다.
     * @summary 로그인
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseLoginResponse>>;

    /**
     * 로그인 API입니다.
     * 로그인
     */
    login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseLoginResponse>;

    /**
     * API for logout
     * @summary logout API 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for logout
     * logout API 입니다.
     */
    logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for Refresh Token
     * @summary refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    updateTokenRaw(requestParameters: UpdateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRefreshTokenResponse>>;

    /**
     * API for Refresh Token
     * refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
     */
    updateToken(requestParameters: UpdateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRefreshTokenResponse>;

}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI implements AuthControllerApiInterface {

    /**
     * API for Blinding Member
     * 탈퇴 API입니다.
     */
    async blindMemberRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for Blinding Member
     * 탈퇴 API입니다.
     */
    async blindMember(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.blindMemberRaw(initOverrides);
        return await response.value();
    }

    /**
     * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
     * 임시 access token 발급 API
     */
    async getTestAccessTokenRaw(requestParameters: GetTestAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getTestAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth/token/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
     * 임시 access token 발급 API
     */
    async getTestAccessToken(requestParameters: GetTestAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.getTestAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원가입 API입니다.
     * 회원가입
     */
    async joinRaw(requestParameters: JoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.joinRequest === null || requestParameters.joinRequest === undefined) {
            throw new runtime.RequiredError('joinRequest','Required parameter requestParameters.joinRequest was null or undefined when calling join.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth/join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.joinRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 회원가입 API입니다.
     * 회원가입
     */
    async join(requestParameters: JoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.joinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 로그인 API입니다.
     * 로그인
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseLoginResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loginRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 로그인 API입니다.
     * 로그인
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for logout
     * logout API 입니다.
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for logout
     * logout API 입니다.
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * API for Refresh Token
     * refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
     */
    async updateTokenRaw(requestParameters: UpdateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRefreshTokenResponse>> {
        if (requestParameters.refreshTokenRequest === null || requestParameters.refreshTokenRequest === undefined) {
            throw new runtime.RequiredError('refreshTokenRequest','Required parameter requestParameters.refreshTokenRequest was null or undefined when calling updateToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.refreshTokenRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for Refresh Token
     * refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
     */
    async updateToken(requestParameters: UpdateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRefreshTokenResponse> {
        const response = await this.updateTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
