/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseChatMessageListResponse,
  ApiResponseChatroomListResponse,
  ApiResponseEnterChatroomResponse,
  ApiResponseListString,
  ApiResponseObject,
  ApiResponseString,
} from '../models/index';

export interface EnterChatroomRequest {
    chatroomUuid: string;
}

export interface ExitChatroomRequest {
    chatroomUuid: string;
}

export interface GetChatMessagesRequest {
    chatroomUuid: string;
    cursor?: number;
}

export interface ReadChatMessageRequest {
    chatroomUuid: string;
    timestamp?: number;
}

export interface StartChatroomByBoardIdRequest {
    boardId: number;
}

export interface StartChatroomByMemberIdRequest {
    memberId: number;
}

/**
 * ChatApi - interface
 * 
 * @export
 * @interface ChatApiInterface
 */
export interface ChatApiInterface {
    /**
     * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
     * @summary 채팅방 입장 API
     * @param {string} chatroomUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    enterChatroomRaw(requestParameters: EnterChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>>;

    /**
     * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
     * 채팅방 입장 API
     */
    enterChatroom(requestParameters: EnterChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse>;

    /**
     * 채팅방 나가기 API 입니다.
     * @summary 채팅방 나가기 API
     * @param {string} chatroomUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    exitChatroomRaw(requestParameters: ExitChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>>;

    /**
     * 채팅방 나가기 API 입니다.
     * 채팅방 나가기 API
     */
    exitChatroom(requestParameters: ExitChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject>;

    /**
     * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
     * @summary 채팅 내역 조회 API
     * @param {string} chatroomUuid 
     * @param {number} [cursor] 페이징을 위한 커서, 13자리 timestamp integer를 보내주세요. (UTC 기준)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatMessagesRaw(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatMessageListResponse>>;

    /**
     * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
     * 채팅 내역 조회 API
     */
    getChatMessages(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatMessageListResponse>;

    /**
     * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
     * @summary 채팅방 목록 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatroomRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatroomListResponse>>;

    /**
     * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
     * 채팅방 목록 조회 API
     */
    getChatroom(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatroomListResponse>;

    /**
     * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
     * @summary 안읽은 채팅방 uuid 목록 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getUnreadChatroomUuidRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListString>>;

    /**
     * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
     * 안읽은 채팅방 uuid 목록 조회 API
     */
    getUnreadChatroomUuid(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListString>;

    /**
     * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
     * @summary 채팅 메시지 읽음 처리 API
     * @param {string} chatroomUuid 
     * @param {number} [timestamp] 특정 메시지를 읽음 처리하는 경우, 그 메시지의 timestamp를 함께 보내주세요.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    readChatMessageRaw(requestParameters: ReadChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
     * 채팅 메시지 읽음 처리 API
     */
    readChatMessage(requestParameters: ReadChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
     * @summary 특정 글을 통한 채팅방 시작 API
     * @param {number} boardId 말 걸어보기 버튼을 누른 게시글의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    startChatroomByBoardIdRaw(requestParameters: StartChatroomByBoardIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>>;

    /**
     * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
     * 특정 글을 통한 채팅방 시작 API
     */
    startChatroomByBoardId(requestParameters: StartChatroomByBoardIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse>;

    /**
     * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
     * @summary 특정 회원과 채팅방 시작 API
     * @param {number} memberId 채팅방을 시작할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    startChatroomByMemberIdRaw(requestParameters: StartChatroomByMemberIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>>;

    /**
     * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
     * 특정 회원과 채팅방 시작 API
     */
    startChatroomByMemberId(requestParameters: StartChatroomByMemberIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse>;

}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI implements ChatApiInterface {

    /**
     * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
     * 채팅방 입장 API
     */
    async enterChatroomRaw(requestParameters: EnterChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>> {
        if (requestParameters.chatroomUuid === null || requestParameters.chatroomUuid === undefined) {
            throw new runtime.RequiredError('chatroomUuid','Required parameter requestParameters.chatroomUuid was null or undefined when calling enterChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/{chatroomUuid}/enter`.replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(requestParameters.chatroomUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
     * 채팅방 입장 API
     */
    async enterChatroom(requestParameters: EnterChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse> {
        const response = await this.enterChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 채팅방 나가기 API 입니다.
     * 채팅방 나가기 API
     */
    async exitChatroomRaw(requestParameters: ExitChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters.chatroomUuid === null || requestParameters.chatroomUuid === undefined) {
            throw new runtime.RequiredError('chatroomUuid','Required parameter requestParameters.chatroomUuid was null or undefined when calling exitChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/{chatroomUuid}/exit`.replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(requestParameters.chatroomUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 채팅방 나가기 API 입니다.
     * 채팅방 나가기 API
     */
    async exitChatroom(requestParameters: ExitChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.exitChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
     * 채팅 내역 조회 API
     */
    async getChatMessagesRaw(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatMessageListResponse>> {
        if (requestParameters.chatroomUuid === null || requestParameters.chatroomUuid === undefined) {
            throw new runtime.RequiredError('chatroomUuid','Required parameter requestParameters.chatroomUuid was null or undefined when calling getChatMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/{chatroomUuid}/messages`.replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(requestParameters.chatroomUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
     * 채팅 내역 조회 API
     */
    async getChatMessages(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatMessageListResponse> {
        const response = await this.getChatMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
     * 채팅방 목록 조회 API
     */
    async getChatroomRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatroomListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chatroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
     * 채팅방 목록 조회 API
     */
    async getChatroom(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatroomListResponse> {
        const response = await this.getChatroomRaw(initOverrides);
        return await response.value();
    }

    /**
     * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
     * 안읽은 채팅방 uuid 목록 조회 API
     */
    async getUnreadChatroomUuidRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/unread`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
     * 안읽은 채팅방 uuid 목록 조회 API
     */
    async getUnreadChatroomUuid(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListString> {
        const response = await this.getUnreadChatroomUuidRaw(initOverrides);
        return await response.value();
    }

    /**
     * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
     * 채팅 메시지 읽음 처리 API
     */
    async readChatMessageRaw(requestParameters: ReadChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.chatroomUuid === null || requestParameters.chatroomUuid === undefined) {
            throw new runtime.RequiredError('chatroomUuid','Required parameter requestParameters.chatroomUuid was null or undefined when calling readChatMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/{chatroomUuid}/read`.replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(requestParameters.chatroomUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
     * 채팅 메시지 읽음 처리 API
     */
    async readChatMessage(requestParameters: ReadChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.readChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
     * 특정 글을 통한 채팅방 시작 API
     */
    async startChatroomByBoardIdRaw(requestParameters: StartChatroomByBoardIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling startChatroomByBoardId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/start/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
     * 특정 글을 통한 채팅방 시작 API
     */
    async startChatroomByBoardId(requestParameters: StartChatroomByBoardIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse> {
        const response = await this.startChatroomByBoardIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
     * 특정 회원과 채팅방 시작 API
     */
    async startChatroomByMemberIdRaw(requestParameters: StartChatroomByMemberIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseEnterChatroomResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling startChatroomByMemberId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/chat/start/member/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
     * 특정 회원과 채팅방 시작 API
     */
    async startChatroomByMemberId(requestParameters: StartChatroomByMemberIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseEnterChatroomResponse> {
        const response = await this.startChatroomByMemberIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
