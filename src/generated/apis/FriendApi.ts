/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseDeleteFriendResponse,
  ApiResponseFriendListResponse,
  ApiResponseFriendRequestResponse,
  ApiResponseListFriendInfoResponse,
  ApiResponseStarFriendResponse,
} from '../models/index';

export interface AcceptFriendRequestRequest {
    memberId: number;
}

export interface CancelFriendRequestRequest {
    memberId: number;
}

export interface DeleteFriendRequest {
    memberId: number;
}

export interface RejectFriendRequestRequest {
    memberId: number;
}

export interface ReverseFriendLikedRequest {
    memberId: number;
}

export interface SearchFriendRequest {
    query: string;
}

export interface SendFriendRequestRequest {
    memberId: number;
}

/**
 * FriendApi - interface
 * 
 * @export
 * @interface FriendApiInterface
 */
export interface FriendApiInterface {
    /**
     * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
     * @summary 친구 요청 수락 API
     * @param {number} memberId 친구 요청을 수락할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    acceptFriendRequestRaw(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>>;

    /**
     * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
     * 친구 요청 수락 API
     */
    acceptFriendRequest(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse>;

    /**
     * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
     * @summary 친구 요청 취소 API
     * @param {number} memberId 친구 요청을 취소할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    cancelFriendRequestRaw(requestParameters: CancelFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>>;

    /**
     * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
     * 친구 요청 취소 API
     */
    cancelFriendRequest(requestParameters: CancelFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse>;

    /**
     * 친구 회원과의 친구 관계를 끊는 API 입니다.
     * @summary 친구 삭제 API
     * @param {number} memberId 삭제 처리할 친구 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    deleteFriendRaw(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseDeleteFriendResponse>>;

    /**
     * 친구 회원과의 친구 관계를 끊는 API 입니다.
     * 친구 삭제 API
     */
    deleteFriend(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseDeleteFriendResponse>;

    /**
     * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
     * @summary 친구 목록 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    getFriendListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendListResponse>>;

    /**
     * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
     * 친구 목록 조회 API
     */
    getFriendList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendListResponse>;

    /**
     * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
     * @summary 친구 요청 거절 API
     * @param {number} memberId 친구 요청을 거절할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    rejectFriendRequestRaw(requestParameters: RejectFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>>;

    /**
     * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
     * 친구 요청 거절 API
     */
    rejectFriendRequest(requestParameters: RejectFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse>;

    /**
     * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
     * @summary 친구 즐겨찾기 설정/해제 API
     * @param {number} memberId 즐겨찾기 설정/해제할 친구 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    reverseFriendLikedRaw(requestParameters: ReverseFriendLikedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStarFriendResponse>>;

    /**
     * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
     * 친구 즐겨찾기 설정/해제 API
     */
    reverseFriendLiked(requestParameters: ReverseFriendLikedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStarFriendResponse>;

    /**
     * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
     * @summary 소환사명으로 친구 검색 API
     * @param {string} query 친구 목록 검색을 위한 소환사명 string으로, 100자 이하여야 합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    searchFriendRaw(requestParameters: SearchFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListFriendInfoResponse>>;

    /**
     * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
     * 소환사명으로 친구 검색 API
     */
    searchFriend(requestParameters: SearchFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListFriendInfoResponse>;

    /**
     * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
     * @summary 친구 요청 전송 API
     * @param {number} memberId 친구 요청을 전송할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendApiInterface
     */
    sendFriendRequestRaw(requestParameters: SendFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>>;

    /**
     * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
     * 친구 요청 전송 API
     */
    sendFriendRequest(requestParameters: SendFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse>;

}

/**
 * 
 */
export class FriendApi extends runtime.BaseAPI implements FriendApiInterface {

    /**
     * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
     * 친구 요청 수락 API
     */
    async acceptFriendRequestRaw(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling acceptFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/request/{memberId}/accept`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
     * 친구 요청 수락 API
     */
    async acceptFriendRequest(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse> {
        const response = await this.acceptFriendRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
     * 친구 요청 취소 API
     */
    async cancelFriendRequestRaw(requestParameters: CancelFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling cancelFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/request/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
     * 친구 요청 취소 API
     */
    async cancelFriendRequest(requestParameters: CancelFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse> {
        const response = await this.cancelFriendRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 친구 회원과의 친구 관계를 끊는 API 입니다.
     * 친구 삭제 API
     */
    async deleteFriendRaw(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseDeleteFriendResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling deleteFriend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 친구 회원과의 친구 관계를 끊는 API 입니다.
     * 친구 삭제 API
     */
    async deleteFriend(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseDeleteFriendResponse> {
        const response = await this.deleteFriendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
     * 친구 목록 조회 API
     */
    async getFriendListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
     * 친구 목록 조회 API
     */
    async getFriendList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendListResponse> {
        const response = await this.getFriendListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
     * 친구 요청 거절 API
     */
    async rejectFriendRequestRaw(requestParameters: RejectFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling rejectFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/request/{memberId}/reject`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
     * 친구 요청 거절 API
     */
    async rejectFriendRequest(requestParameters: RejectFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse> {
        const response = await this.rejectFriendRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
     * 친구 즐겨찾기 설정/해제 API
     */
    async reverseFriendLikedRaw(requestParameters: ReverseFriendLikedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStarFriendResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling reverseFriendLiked.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/{memberId}/star`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
     * 친구 즐겨찾기 설정/해제 API
     */
    async reverseFriendLiked(requestParameters: ReverseFriendLikedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStarFriendResponse> {
        const response = await this.reverseFriendLikedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
     * 소환사명으로 친구 검색 API
     */
    async searchFriendRaw(requestParameters: SearchFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListFriendInfoResponse>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchFriend.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
     * 소환사명으로 친구 검색 API
     */
    async searchFriend(requestParameters: SearchFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListFriendInfoResponse> {
        const response = await this.searchFriendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
     * 친구 요청 전송 API
     */
    async sendFriendRequestRaw(requestParameters: SendFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFriendRequestResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling sendFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/friend/request/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
     * 친구 요청 전송 API
     */
    async sendFriendRequest(requestParameters: SendFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFriendRequestResponse> {
        const response = await this.sendFriendRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
