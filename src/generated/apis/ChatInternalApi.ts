/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseChatCreateResponse,
  ApiResponseListString,
  ChatCreateRequest,
} from '../models/index';

export interface AddChatRequest {
    memberId: number;
    chatroomUuid: string;
    chatCreateRequest: ChatCreateRequest;
}

export interface GetChatroomUuidRequest {
    memberId: number;
}

/**
 * ChatInternalApi - interface
 * 
 * @export
 * @interface ChatInternalApiInterface
 */
export interface ChatInternalApiInterface {
    /**
     * 새로운 채팅 메시지를 등록하는 API 입니다.
     * @summary 채팅 메시지 등록 API
     * @param {number} memberId 
     * @param {string} chatroomUuid 
     * @param {ChatCreateRequest} chatCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatInternalApiInterface
     */
    addChatRaw(requestParameters: AddChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatCreateResponse>>;

    /**
     * 새로운 채팅 메시지를 등록하는 API 입니다.
     * 채팅 메시지 등록 API
     */
    addChat(requestParameters: AddChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatCreateResponse>;

    /**
     * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
     * @summary 채팅방 uuid 조회 API
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatInternalApiInterface
     */
    getChatroomUuidRaw(requestParameters: GetChatroomUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListString>>;

    /**
     * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
     * 채팅방 uuid 조회 API
     */
    getChatroomUuid(requestParameters: GetChatroomUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListString>;

}

/**
 * 
 */
export class ChatInternalApi extends runtime.BaseAPI implements ChatInternalApiInterface {

    /**
     * 새로운 채팅 메시지를 등록하는 API 입니다.
     * 채팅 메시지 등록 API
     */
    async addChatRaw(requestParameters: AddChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseChatCreateResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling addChat.');
        }

        if (requestParameters.chatroomUuid === null || requestParameters.chatroomUuid === undefined) {
            throw new runtime.RequiredError('chatroomUuid','Required parameter requestParameters.chatroomUuid was null or undefined when calling addChat.');
        }

        if (requestParameters.chatCreateRequest === null || requestParameters.chatCreateRequest === undefined) {
            throw new runtime.RequiredError('chatCreateRequest','Required parameter requestParameters.chatCreateRequest was null or undefined when calling addChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/{memberId}/chat/{chatroomUuid}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(requestParameters.chatroomUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.chatCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 새로운 채팅 메시지를 등록하는 API 입니다.
     * 채팅 메시지 등록 API
     */
    async addChat(requestParameters: AddChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseChatCreateResponse> {
        const response = await this.addChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
     * 채팅방 uuid 조회 API
     */
    async getChatroomUuidRaw(requestParameters: GetChatroomUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListString>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getChatroomUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/{memberId}/chatroom/uuid`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
     * 채팅방 uuid 조회 API
     */
    async getChatroomUuid(requestParameters: GetChatroomUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListString> {
        const response = await this.getChatroomUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
