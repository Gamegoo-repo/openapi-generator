/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseBoardBumpResponse,
  ApiResponseBoardByIdResponse,
  ApiResponseBoardByIdResponseForMember,
  ApiResponseBoardCursorResponse,
  ApiResponseBoardInsertResponse,
  ApiResponseBoardResponse,
  ApiResponseBoardUpdateResponse,
  ApiResponseMyBoardCursorResponse,
  ApiResponseMyBoardResponse,
  ApiResponseString,
  BoardInsertRequest,
  BoardUpdateRequest,
  GuestBoardDeleteRequest,
  GuestBoardInsertRequest,
  GuestBoardUpdateRequest,
} from '../models/index';

export interface DeleteRequest {
    boardId: number;
}

export interface BoardInsertOperationRequest {
    boardInsertRequest: BoardInsertRequest;
}

export interface BoardListRequest {
    page: number;
    gameMode?: BoardListGameModeEnum;
    tier?: BoardListTierEnum;
    mainP?: BoardListMainPEnum;
    subP?: BoardListSubPEnum;
    mike?: BoardListMikeEnum;
}

export interface BoardUpdateOperationRequest {
    boardId: number;
    boardUpdateRequest: BoardUpdateRequest;
}

export interface BumpBoardRequest {
    boardId: number;
}

export interface DeleteGuestBoardRequest {
    boardId: number;
    guestBoardDeleteRequest: GuestBoardDeleteRequest;
}

export interface GetBoardByIdRequest {
    boardId: number;
}

export interface GetBoardByIdForMemberRequest {
    boardId: number;
}

export interface GetBoardsWithCursorRequest {
    cursor?: string;
    cursorId?: number;
    gameMode?: GetBoardsWithCursorGameModeEnum;
    tier?: GetBoardsWithCursorTierEnum;
    position1?: GetBoardsWithCursorPosition1Enum;
    position2?: GetBoardsWithCursorPosition2Enum;
}

export interface GetMyBoardCursorListRequest {
    cursor?: string;
}

export interface GetMyBoardListRequest {
    page: number;
}

export interface GuestBoardInsertOperationRequest {
    guestBoardInsertRequest: GuestBoardInsertRequest;
}

export interface GuestBoardUpdateOperationRequest {
    boardId: number;
    guestBoardUpdateRequest: GuestBoardUpdateRequest;
}

/**
 * BoardApi - interface
 * 
 * @export
 * @interface BoardApiInterface
 */
export interface BoardApiInterface {
    /**
     * 게시판에서 글을 삭제하는 API 입니다.
     * @summary 게시판 글 삭제 API
     * @param {number} boardId 삭제할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 게시판에서 글을 삭제하는 API 입니다.
     * 게시판 글 삭제 API
     */
    _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * @summary 게시판 글 작성 API
     * @param {BoardInsertRequest} boardInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    boardInsertRaw(requestParameters: BoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardInsertResponse>>;

    /**
     * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 게시판 글 작성 API
     */
    boardInsert(requestParameters: BoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardInsertResponse>;

    /**
     * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * @summary 게시판 글 목록 조회 API
     * @param {number} page 
     * @param {'FAST' | 'SOLO' | 'FREE' | 'ARAM'} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
     * @param {'UNRANKED' | 'IRON' | 'BRONZE' | 'SILVER' | 'GOLD' | 'PLATINUM' | 'EMERALD' | 'DIAMOND' | 'MASTER' | 'GRANDMASTER' | 'CHALLENGER'} [tier] (선택) 티어를 선택해주세요.
     * @param {'ANY' | 'TOP' | 'JUNGLE' | 'MID' | 'ADC' | 'SUP'} [mainP] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {'ANY' | 'TOP' | 'JUNGLE' | 'MID' | 'ADC' | 'SUP'} [subP] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {'UNAVAILABLE' | 'AVAILABLE'} [mike] (선택) 마이크 여부를 선택해주세요.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    boardListRaw(requestParameters: BoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardResponse>>;

    /**
     * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 게시판 글 목록 조회 API
     */
    boardList(requestParameters: BoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardResponse>;

    /**
     * 게시판에서 글을 수정하는 API 입니다.
     * @summary 게시판 글 수정 API
     * @param {number} boardId 수정할 게시판 글 id 입니다.
     * @param {BoardUpdateRequest} boardUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    boardUpdateRaw(requestParameters: BoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardUpdateResponse>>;

    /**
     * 게시판에서 글을 수정하는 API 입니다.
     * 게시판 글 수정 API
     */
    boardUpdate(requestParameters: BoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardUpdateResponse>;

    /**
     * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
     * @summary 게시글 끌올 API
     * @param {number} boardId 끌올할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    bumpBoardRaw(requestParameters: BumpBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardBumpResponse>>;

    /**
     * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
     * 게시글 끌올 API
     */
    bumpBoard(requestParameters: BumpBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardBumpResponse>;

    /**
     * 비회원이 게시판에서 글을 삭제하는 API 입니다.
     * @summary 비회원 게시판 글 삭제 API
     * @param {number} boardId 삭제할 게시판 글 id 입니다.
     * @param {GuestBoardDeleteRequest} guestBoardDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    deleteGuestBoardRaw(requestParameters: DeleteGuestBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 비회원이 게시판에서 글을 삭제하는 API 입니다.
     * 비회원 게시판 글 삭제 API
     */
    deleteGuestBoard(requestParameters: DeleteGuestBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * @summary 비회원용 게시판 글 조회 API
     * @param {number} boardId 조회할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    getBoardByIdRaw(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardByIdResponse>>;

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 비회원용 게시판 글 조회 API
     */
    getBoardById(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardByIdResponse>;

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * @summary 회원용 게시판 글 조회 API
     * @param {number} boardId 조회할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    getBoardByIdForMemberRaw(requestParameters: GetBoardByIdForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardByIdResponseForMember>>;

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 회원용 게시판 글 조회 API
     */
    getBoardByIdForMember(requestParameters: GetBoardByIdForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardByIdResponseForMember>;

    /**
     * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * @summary 커서 기반 게시판 글 목록 조회 API
     * @param {string} [cursor] (선택) 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 없으면 최신글부터 조회합니다.
     * @param {number} [cursorId] (선택) 커서와 동일한 activityTime을 가진 게시글 중 마지막 게시글의 id. 커서 페이징에 사용됩니다.
     * @param {'FAST' | 'SOLO' | 'FREE' | 'ARAM'} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
     * @param {'UNRANKED' | 'IRON' | 'BRONZE' | 'SILVER' | 'GOLD' | 'PLATINUM' | 'EMERALD' | 'DIAMOND' | 'MASTER' | 'GRANDMASTER' | 'CHALLENGER'} [tier] (선택) 티어를 선택해주세요.
     * @param {'ANY' | 'TOP' | 'JUNGLE' | 'MID' | 'ADC' | 'SUP'} [position1] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {'ANY' | 'TOP' | 'JUNGLE' | 'MID' | 'ADC' | 'SUP'} [position2] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    getBoardsWithCursorRaw(requestParameters: GetBoardsWithCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardCursorResponse>>;

    /**
     * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 커서 기반 게시판 글 목록 조회 API
     */
    getBoardsWithCursor(requestParameters: GetBoardsWithCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardCursorResponse>;

    /**
     * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
     * @summary 내가 작성한 게시판 글 목록 조회 API/모바일
     * @param {string} [cursor] 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 보내지 않으면 가장 최근 게시물 10개를 조회합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    getMyBoardCursorListRaw(requestParameters: GetMyBoardCursorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyBoardCursorResponse>>;

    /**
     * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
     * 내가 작성한 게시판 글 목록 조회 API/모바일
     */
    getMyBoardCursorList(requestParameters: GetMyBoardCursorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyBoardCursorResponse>;

    /**
     * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
     * @summary 내가 작성한 게시판 글 목록 조회 API
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    getMyBoardListRaw(requestParameters: GetMyBoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyBoardResponse>>;

    /**
     * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
     * 내가 작성한 게시판 글 목록 조회 API
     */
    getMyBoardList(requestParameters: GetMyBoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyBoardResponse>;

    /**
     * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * @summary 비회원 게시판 글 작성 API
     * @param {GuestBoardInsertRequest} guestBoardInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    guestBoardInsertRaw(requestParameters: GuestBoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardInsertResponse>>;

    /**
     * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 비회원 게시판 글 작성 API
     */
    guestBoardInsert(requestParameters: GuestBoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardInsertResponse>;

    /**
     * 비회원이 게시판에서 글을 수정하는 API 입니다.
     * @summary 비회원 게시판 글 수정 API
     * @param {number} boardId 수정할 게시판 글 id 입니다.
     * @param {GuestBoardUpdateRequest} guestBoardUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiInterface
     */
    guestBoardUpdateRaw(requestParameters: GuestBoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardUpdateResponse>>;

    /**
     * 비회원이 게시판에서 글을 수정하는 API 입니다.
     * 비회원 게시판 글 수정 API
     */
    guestBoardUpdate(requestParameters: GuestBoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardUpdateResponse>;

}

/**
 * 
 */
export class BoardApi extends runtime.BaseAPI implements BoardApiInterface {

    /**
     * 게시판에서 글을 삭제하는 API 입니다.
     * 게시판 글 삭제 API
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판에서 글을 삭제하는 API 입니다.
     * 게시판 글 삭제 API
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 게시판 글 작성 API
     */
    async boardInsertRaw(requestParameters: BoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardInsertResponse>> {
        if (requestParameters.boardInsertRequest === null || requestParameters.boardInsertRequest === undefined) {
            throw new runtime.RequiredError('boardInsertRequest','Required parameter requestParameters.boardInsertRequest was null or undefined when calling boardInsert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.boardInsertRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 게시판 글 작성 API
     */
    async boardInsert(requestParameters: BoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardInsertResponse> {
        const response = await this.boardInsertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 게시판 글 목록 조회 API
     */
    async boardListRaw(requestParameters: BoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardResponse>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling boardList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.gameMode !== undefined) {
            queryParameters['gameMode'] = requestParameters.gameMode;
        }

        if (requestParameters.tier !== undefined) {
            queryParameters['tier'] = requestParameters.tier;
        }

        if (requestParameters.mainP !== undefined) {
            queryParameters['mainP'] = requestParameters.mainP;
        }

        if (requestParameters.subP !== undefined) {
            queryParameters['subP'] = requestParameters.subP;
        }

        if (requestParameters.mike !== undefined) {
            queryParameters['mike'] = requestParameters.mike;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 게시판 글 목록 조회 API
     */
    async boardList(requestParameters: BoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardResponse> {
        const response = await this.boardListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시판에서 글을 수정하는 API 입니다.
     * 게시판 글 수정 API
     */
    async boardUpdateRaw(requestParameters: BoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardUpdateResponse>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardUpdate.');
        }

        if (requestParameters.boardUpdateRequest === null || requestParameters.boardUpdateRequest === undefined) {
            throw new runtime.RequiredError('boardUpdateRequest','Required parameter requestParameters.boardUpdateRequest was null or undefined when calling boardUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.boardUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판에서 글을 수정하는 API 입니다.
     * 게시판 글 수정 API
     */
    async boardUpdate(requestParameters: BoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardUpdateResponse> {
        const response = await this.boardUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
     * 게시글 끌올 API
     */
    async bumpBoardRaw(requestParameters: BumpBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardBumpResponse>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling bumpBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/{boardId}/bump`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
     * 게시글 끌올 API
     */
    async bumpBoard(requestParameters: BumpBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardBumpResponse> {
        const response = await this.bumpBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 비회원이 게시판에서 글을 삭제하는 API 입니다.
     * 비회원 게시판 글 삭제 API
     */
    async deleteGuestBoardRaw(requestParameters: DeleteGuestBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling deleteGuestBoard.');
        }

        if (requestParameters.guestBoardDeleteRequest === null || requestParameters.guestBoardDeleteRequest === undefined) {
            throw new runtime.RequiredError('guestBoardDeleteRequest','Required parameter requestParameters.guestBoardDeleteRequest was null or undefined when calling deleteGuestBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/guest/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.guestBoardDeleteRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 비회원이 게시판에서 글을 삭제하는 API 입니다.
     * 비회원 게시판 글 삭제 API
     */
    async deleteGuestBoard(requestParameters: DeleteGuestBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.deleteGuestBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 비회원용 게시판 글 조회 API
     */
    async getBoardByIdRaw(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardByIdResponse>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/list/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 비회원용 게시판 글 조회 API
     */
    async getBoardById(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardByIdResponse> {
        const response = await this.getBoardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 회원용 게시판 글 조회 API
     */
    async getBoardByIdForMemberRaw(requestParameters: GetBoardByIdForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardByIdResponseForMember>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardByIdForMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/member/list/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * 회원용 게시판 글 조회 API
     */
    async getBoardByIdForMember(requestParameters: GetBoardByIdForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardByIdResponseForMember> {
        const response = await this.getBoardByIdForMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 커서 기반 게시판 글 목록 조회 API
     */
    async getBoardsWithCursorRaw(requestParameters: GetBoardsWithCursorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardCursorResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.cursorId !== undefined) {
            queryParameters['cursorId'] = requestParameters.cursorId;
        }

        if (requestParameters.gameMode !== undefined) {
            queryParameters['gameMode'] = requestParameters.gameMode;
        }

        if (requestParameters.tier !== undefined) {
            queryParameters['tier'] = requestParameters.tier;
        }

        if (requestParameters.position1 !== undefined) {
            queryParameters['position1'] = requestParameters.position1;
        }

        if (requestParameters.position2 !== undefined) {
            queryParameters['position2'] = requestParameters.position2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/cursor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * 커서 기반 게시판 글 목록 조회 API
     */
    async getBoardsWithCursor(requestParameters: GetBoardsWithCursorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardCursorResponse> {
        const response = await this.getBoardsWithCursorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
     * 내가 작성한 게시판 글 목록 조회 API/모바일
     */
    async getMyBoardCursorListRaw(requestParameters: GetMyBoardCursorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyBoardCursorResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/my/cursor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
     * 내가 작성한 게시판 글 목록 조회 API/모바일
     */
    async getMyBoardCursorList(requestParameters: GetMyBoardCursorListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyBoardCursorResponse> {
        const response = await this.getMyBoardCursorListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
     * 내가 작성한 게시판 글 목록 조회 API
     */
    async getMyBoardListRaw(requestParameters: GetMyBoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyBoardResponse>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getMyBoardList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
     * 내가 작성한 게시판 글 목록 조회 API
     */
    async getMyBoardList(requestParameters: GetMyBoardListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyBoardResponse> {
        const response = await this.getMyBoardListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 비회원 게시판 글 작성 API
     */
    async guestBoardInsertRaw(requestParameters: GuestBoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardInsertResponse>> {
        if (requestParameters.guestBoardInsertRequest === null || requestParameters.guestBoardInsertRequest === undefined) {
            throw new runtime.RequiredError('guestBoardInsertRequest','Required parameter requestParameters.guestBoardInsertRequest was null or undefined when calling guestBoardInsert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/guest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.guestBoardInsertRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * 비회원 게시판 글 작성 API
     */
    async guestBoardInsert(requestParameters: GuestBoardInsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardInsertResponse> {
        const response = await this.guestBoardInsertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 비회원이 게시판에서 글을 수정하는 API 입니다.
     * 비회원 게시판 글 수정 API
     */
    async guestBoardUpdateRaw(requestParameters: GuestBoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBoardUpdateResponse>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling guestBoardUpdate.');
        }

        if (requestParameters.guestBoardUpdateRequest === null || requestParameters.guestBoardUpdateRequest === undefined) {
            throw new runtime.RequiredError('guestBoardUpdateRequest','Required parameter requestParameters.guestBoardUpdateRequest was null or undefined when calling guestBoardUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/posts/guest/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.guestBoardUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 비회원이 게시판에서 글을 수정하는 API 입니다.
     * 비회원 게시판 글 수정 API
     */
    async guestBoardUpdate(requestParameters: GuestBoardUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBoardUpdateResponse> {
        const response = await this.guestBoardUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum BoardListGameModeEnum {
    Fast = 'FAST',
    Solo = 'SOLO',
    Free = 'FREE',
    Aram = 'ARAM'
}
/**
  * @export
  * @enum {string}
  */
export enum BoardListTierEnum {
    Unranked = 'UNRANKED',
    Iron = 'IRON',
    Bronze = 'BRONZE',
    Silver = 'SILVER',
    Gold = 'GOLD',
    Platinum = 'PLATINUM',
    Emerald = 'EMERALD',
    Diamond = 'DIAMOND',
    Master = 'MASTER',
    Grandmaster = 'GRANDMASTER',
    Challenger = 'CHALLENGER'
}
/**
  * @export
  * @enum {string}
  */
export enum BoardListMainPEnum {
    Any = 'ANY',
    Top = 'TOP',
    Jungle = 'JUNGLE',
    Mid = 'MID',
    Adc = 'ADC',
    Sup = 'SUP'
}
/**
  * @export
  * @enum {string}
  */
export enum BoardListSubPEnum {
    Any = 'ANY',
    Top = 'TOP',
    Jungle = 'JUNGLE',
    Mid = 'MID',
    Adc = 'ADC',
    Sup = 'SUP'
}
/**
  * @export
  * @enum {string}
  */
export enum BoardListMikeEnum {
    Unavailable = 'UNAVAILABLE',
    Available = 'AVAILABLE'
}
/**
  * @export
  * @enum {string}
  */
export enum GetBoardsWithCursorGameModeEnum {
    Fast = 'FAST',
    Solo = 'SOLO',
    Free = 'FREE',
    Aram = 'ARAM'
}
/**
  * @export
  * @enum {string}
  */
export enum GetBoardsWithCursorTierEnum {
    Unranked = 'UNRANKED',
    Iron = 'IRON',
    Bronze = 'BRONZE',
    Silver = 'SILVER',
    Gold = 'GOLD',
    Platinum = 'PLATINUM',
    Emerald = 'EMERALD',
    Diamond = 'DIAMOND',
    Master = 'MASTER',
    Grandmaster = 'GRANDMASTER',
    Challenger = 'CHALLENGER'
}
/**
  * @export
  * @enum {string}
  */
export enum GetBoardsWithCursorPosition1Enum {
    Any = 'ANY',
    Top = 'TOP',
    Jungle = 'JUNGLE',
    Mid = 'MID',
    Adc = 'ADC',
    Sup = 'SUP'
}
/**
  * @export
  * @enum {string}
  */
export enum GetBoardsWithCursorPosition2Enum {
    Any = 'ANY',
    Top = 'TOP',
    Jungle = 'JUNGLE',
    Mid = 'MID',
    Adc = 'ADC',
    Sup = 'SUP'
}
