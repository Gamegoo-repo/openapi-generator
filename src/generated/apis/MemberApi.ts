/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseMyProfileResponse,
  ApiResponseOtherProfileResponse,
  ApiResponseString,
  GameStyleRequest,
  IsMikeRequest,
  PositionRequest,
  ProfileImageRequest,
} from '../models/index';

export interface 1Request {
    positionRequest: PositionRequest;
}

export interface AddGameStyleRequest {
    gameStyleRequest: GameStyleRequest;
}

export interface GetMemberRequest {
    id: number;
}

export interface GrantAdminRoleRequest {
    memberId: number;
}

export interface ModifyIsMikeRequest {
    isMikeRequest: IsMikeRequest;
}

export interface ModifyPositionRequest {
    profileImageRequest: ProfileImageRequest;
}

export interface RevokeAdminRoleRequest {
    memberId: number;
}

/**
 * MemberApi - interface
 * 
 * @export
 * @interface MemberApiInterface
 */
export interface MemberApiInterface {
    /**
     * API for Main/Sub/Want Position Modification
     * @summary 주/부/원하는 포지션 수정 API 입니다.
     * @param {PositionRequest} positionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    _1Raw(requestParameters: 1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for Main/Sub/Want Position Modification
     * 주/부/원하는 포지션 수정 API 입니다.
     */
    _1(requestParameters: 1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for Gamestyle addition and modification 
     * @summary gamestyle 추가 및 수정 API 입니다.
     * @param {GameStyleRequest} gameStyleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    addGameStyleRaw(requestParameters: AddGameStyleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for Gamestyle addition and modification 
     * gamestyle 추가 및 수정 API 입니다.
     */
    addGameStyle(requestParameters: AddGameStyleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for looking up other member with jwt
     * @summary 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    getMemberRaw(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseOtherProfileResponse>>;

    /**
     * API for looking up other member with jwt
     * 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    getMember(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseOtherProfileResponse>;

    /**
     * API for looking up member with jwt
     * @summary 내 프로필 조회 API 입니다. (jwt 토큰 O)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    getMemberJWTRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyProfileResponse>>;

    /**
     * API for looking up member with jwt
     * 내 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    getMemberJWT(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyProfileResponse>;

    /**
     * 개발용 어드민 권한 부여 API
     * @summary 어드민 권한 부여 API (개발용)
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    grantAdminRoleRaw(requestParameters: GrantAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 개발용 어드민 권한 부여 API
     * 어드민 권한 부여 API (개발용)
     */
    grantAdminRole(requestParameters: GrantAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for isMike Modification
     * @summary 마이크 여부 수정 API 입니다.
     * @param {IsMikeRequest} isMikeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    modifyIsMikeRaw(requestParameters: ModifyIsMikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for isMike Modification
     * 마이크 여부 수정 API 입니다.
     */
    modifyIsMike(requestParameters: ModifyIsMikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for Profile Image Modification
     * @summary 프로필 이미지 수정 API 입니다.
     * @param {ProfileImageRequest} profileImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    modifyPositionRaw(requestParameters: ModifyPositionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for Profile Image Modification
     * 프로필 이미지 수정 API 입니다.
     */
    modifyPosition(requestParameters: ModifyPositionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for refreshing champion statistics
     * @summary 챔피언 통계 새로고침 API 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    refreshChampionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for refreshing champion statistics
     * 챔피언 통계 새로고침 API 입니다.
     */
    refreshChampionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * 어드민 권한을 일반 사용자로 변경하는 API
     * @summary 일반 사용자 권한으로 변경 API (개발용)
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    revokeAdminRoleRaw(requestParameters: RevokeAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * 어드민 권한을 일반 사용자로 변경하는 API
     * 일반 사용자 권한으로 변경 API (개발용)
     */
    revokeAdminRole(requestParameters: RevokeAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

}

/**
 * 
 */
export class MemberApi extends runtime.BaseAPI implements MemberApiInterface {

    /**
     * API for Main/Sub/Want Position Modification
     * 주/부/원하는 포지션 수정 API 입니다.
     */
    async _1Raw(requestParameters: 1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.positionRequest === null || requestParameters.positionRequest === undefined) {
            throw new runtime.RequiredError('positionRequest','Required parameter requestParameters.positionRequest was null or undefined when calling _1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/position`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.positionRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for Main/Sub/Want Position Modification
     * 주/부/원하는 포지션 수정 API 입니다.
     */
    async _1(requestParameters: 1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this._1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for Gamestyle addition and modification 
     * gamestyle 추가 및 수정 API 입니다.
     */
    async addGameStyleRaw(requestParameters: AddGameStyleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.gameStyleRequest === null || requestParameters.gameStyleRequest === undefined) {
            throw new runtime.RequiredError('gameStyleRequest','Required parameter requestParameters.gameStyleRequest was null or undefined when calling addGameStyle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/gamestyle`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.gameStyleRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for Gamestyle addition and modification 
     * gamestyle 추가 및 수정 API 입니다.
     */
    async addGameStyle(requestParameters: AddGameStyleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.addGameStyleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for looking up other member with jwt
     * 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    async getMemberRaw(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseOtherProfileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/other`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for looking up other member with jwt
     * 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    async getMember(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseOtherProfileResponse> {
        const response = await this.getMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for looking up member with jwt
     * 내 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    async getMemberJWTRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMyProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for looking up member with jwt
     * 내 프로필 조회 API 입니다. (jwt 토큰 O)
     */
    async getMemberJWT(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMyProfileResponse> {
        const response = await this.getMemberJWTRaw(initOverrides);
        return await response.value();
    }

    /**
     * 개발용 어드민 권한 부여 API
     * 어드민 권한 부여 API (개발용)
     */
    async grantAdminRoleRaw(requestParameters: GrantAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling grantAdminRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/admin/grant/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 개발용 어드민 권한 부여 API
     * 어드민 권한 부여 API (개발용)
     */
    async grantAdminRole(requestParameters: GrantAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.grantAdminRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for isMike Modification
     * 마이크 여부 수정 API 입니다.
     */
    async modifyIsMikeRaw(requestParameters: ModifyIsMikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.isMikeRequest === null || requestParameters.isMikeRequest === undefined) {
            throw new runtime.RequiredError('isMikeRequest','Required parameter requestParameters.isMikeRequest was null or undefined when calling modifyIsMike.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/mike`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.isMikeRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for isMike Modification
     * 마이크 여부 수정 API 입니다.
     */
    async modifyIsMike(requestParameters: ModifyIsMikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.modifyIsMikeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for Profile Image Modification
     * 프로필 이미지 수정 API 입니다.
     */
    async modifyPositionRaw(requestParameters: ModifyPositionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.profileImageRequest === null || requestParameters.profileImageRequest === undefined) {
            throw new runtime.RequiredError('profileImageRequest','Required parameter requestParameters.profileImageRequest was null or undefined when calling modifyPosition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/profileImage`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.profileImageRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for Profile Image Modification
     * 프로필 이미지 수정 API 입니다.
     */
    async modifyPosition(requestParameters: ModifyPositionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.modifyPositionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for refreshing champion statistics
     * 챔피언 통계 새로고침 API 입니다.
     */
    async refreshChampionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/champion-stats/refresh`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for refreshing champion statistics
     * 챔피언 통계 새로고침 API 입니다.
     */
    async refreshChampionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.refreshChampionStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 어드민 권한을 일반 사용자로 변경하는 API
     * 일반 사용자 권한으로 변경 API (개발용)
     */
    async revokeAdminRoleRaw(requestParameters: RevokeAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling revokeAdminRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/profile/admin/revoke/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 어드민 권한을 일반 사용자로 변경하는 API
     * 일반 사용자 권한으로 변경 API (개발용)
     */
    async revokeAdminRole(requestParameters: RevokeAdminRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.revokeAdminRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
