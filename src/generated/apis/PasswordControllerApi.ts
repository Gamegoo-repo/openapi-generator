/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponsePasswordCheckResponse,
  ApiResponseString,
  PasswordCheckRequest,
  PasswordResetRequest,
  PasswordResetWithVerifyRequest,
} from '../models/index';

export interface CheckPasswordRequest {
    passwordCheckRequest: PasswordCheckRequest;
}

export interface ResetPasswordRequest {
    passwordResetWithVerifyRequest: PasswordResetWithVerifyRequest;
}

export interface ResetPasswordWithJWTRequest {
    passwordResetRequest: PasswordResetRequest;
}

/**
 * PasswordControllerApi - interface
 * 
 * @export
 * @interface PasswordControllerApiInterface
 */
export interface PasswordControllerApiInterface {
    /**
     * API for checking password
     * @summary 비밀번호 확인 API 입니다.
     * @param {PasswordCheckRequest} passwordCheckRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApiInterface
     */
    checkPasswordRaw(requestParameters: CheckPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePasswordCheckResponse>>;

    /**
     * API for checking password
     * 비밀번호 확인 API 입니다.
     */
    checkPassword(requestParameters: CheckPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePasswordCheckResponse>;

    /**
     * API for reseting password JWT X
     * @summary 비밀번호 재설정 API 입니다. JWT X
     * @param {PasswordResetWithVerifyRequest} passwordResetWithVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for reseting password JWT X
     * 비밀번호 재설정 API 입니다. JWT X
     */
    resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for reseting password JWT O
     * @summary 비밀번호 재설정 API 입니다. JWT O
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApiInterface
     */
    resetPasswordWithJWTRaw(requestParameters: ResetPasswordWithJWTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for reseting password JWT O
     * 비밀번호 재설정 API 입니다. JWT O
     */
    resetPasswordWithJWT(requestParameters: ResetPasswordWithJWTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

}

/**
 * 
 */
export class PasswordControllerApi extends runtime.BaseAPI implements PasswordControllerApiInterface {

    /**
     * API for checking password
     * 비밀번호 확인 API 입니다.
     */
    async checkPasswordRaw(requestParameters: CheckPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePasswordCheckResponse>> {
        if (requestParameters.passwordCheckRequest === null || requestParameters.passwordCheckRequest === undefined) {
            throw new runtime.RequiredError('passwordCheckRequest','Required parameter requestParameters.passwordCheckRequest was null or undefined when calling checkPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/password/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.passwordCheckRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for checking password
     * 비밀번호 확인 API 입니다.
     */
    async checkPassword(requestParameters: CheckPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePasswordCheckResponse> {
        const response = await this.checkPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for reseting password JWT X
     * 비밀번호 재설정 API 입니다. JWT X
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.passwordResetWithVerifyRequest === null || requestParameters.passwordResetWithVerifyRequest === undefined) {
            throw new runtime.RequiredError('passwordResetWithVerifyRequest','Required parameter requestParameters.passwordResetWithVerifyRequest was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/password/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.passwordResetWithVerifyRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for reseting password JWT X
     * 비밀번호 재설정 API 입니다. JWT X
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.resetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for reseting password JWT O
     * 비밀번호 재설정 API 입니다. JWT O
     */
    async resetPasswordWithJWTRaw(requestParameters: ResetPasswordWithJWTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.passwordResetRequest === null || requestParameters.passwordResetRequest === undefined) {
            throw new runtime.RequiredError('passwordResetRequest','Required parameter requestParameters.passwordResetRequest was null or undefined when calling resetPasswordWithJWT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/password/change`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.passwordResetRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for reseting password JWT O
     * 비밀번호 재설정 API 입니다. JWT O
     */
    async resetPasswordWithJWT(requestParameters: ResetPasswordWithJWTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.resetPasswordWithJWTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
