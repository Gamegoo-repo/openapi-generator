/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseString,
  RiotJoinRequest,
  RiotVerifyExistUserRequest,
} from '../models/index';

export interface HandleRSOCallbackRequest {
    code: string;
    state?: string;
}

export interface JoinByRSORequest {
    riotJoinRequest: RiotJoinRequest;
}

export interface VerifyRiotRequest {
    riotVerifyExistUserRequest: RiotVerifyExistUserRequest;
}

/**
 * RiotApi - interface
 * 
 * @export
 * @interface RiotApiInterface
 */
export interface RiotApiInterface {
    /**
     * 
     * @summary Riot OAuth 인증 코드 콜백 처리
     * @param {string} code 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApiInterface
     */
    handleRSOCallbackRaw(requestParameters: HandleRSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Riot OAuth 인증 코드 콜백 처리
     */
    handleRSOCallback(requestParameters: HandleRSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * API for RSO join
     * @summary RSO 전용 회원가입 API
     * @param {RiotJoinRequest} riotJoinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApiInterface
     */
    joinByRSORaw(requestParameters: JoinByRSORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for RSO join
     * RSO 전용 회원가입 API
     */
    joinByRSO(requestParameters: JoinByRSORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for verifying account by riot API
     * @summary 실제 존재하는 Riot 계정인지 검증하는 API
     * @param {RiotVerifyExistUserRequest} riotVerifyExistUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApiInterface
     */
    verifyRiotRaw(requestParameters: VerifyRiotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for verifying account by riot API
     * 실제 존재하는 Riot 계정인지 검증하는 API
     */
    verifyRiot(requestParameters: VerifyRiotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

}

/**
 * 
 */
export class RiotApi extends runtime.BaseAPI implements RiotApiInterface {

    /**
     * Riot OAuth 인증 코드 콜백 처리
     */
    async handleRSOCallbackRaw(requestParameters: HandleRSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling handleRSOCallback.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/riot/oauth/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Riot OAuth 인증 코드 콜백 처리
     */
    async handleRSOCallback(requestParameters: HandleRSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleRSOCallbackRaw(requestParameters, initOverrides);
    }

    /**
     * API for RSO join
     * RSO 전용 회원가입 API
     */
    async joinByRSORaw(requestParameters: JoinByRSORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.riotJoinRequest === null || requestParameters.riotJoinRequest === undefined) {
            throw new runtime.RequiredError('riotJoinRequest','Required parameter requestParameters.riotJoinRequest was null or undefined when calling joinByRSO.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/riot/join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.riotJoinRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for RSO join
     * RSO 전용 회원가입 API
     */
    async joinByRSO(requestParameters: JoinByRSORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.joinByRSORaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for verifying account by riot API
     * 실제 존재하는 Riot 계정인지 검증하는 API
     */
    async verifyRiotRaw(requestParameters: VerifyRiotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.riotVerifyExistUserRequest === null || requestParameters.riotVerifyExistUserRequest === undefined) {
            throw new runtime.RequiredError('riotVerifyExistUserRequest','Required parameter requestParameters.riotVerifyExistUserRequest was null or undefined when calling verifyRiot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/riot/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.riotVerifyExistUserRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for verifying account by riot API
     * 실제 존재하는 Riot 계정인지 검증하는 API
     */
    async verifyRiot(requestParameters: VerifyRiotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.verifyRiotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
