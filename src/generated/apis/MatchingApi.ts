/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseMatchingFoundResponse,
  ApiResponsePriorityListResponse,
  ApiResponseString,
  InitializingMatchingRequest,
} from '../models/index';

export interface FindMatchingRequest {
    matchingUuid: string;
    targetMatchingUuid: string;
}

export interface InitializeMatchingRequest {
    memberId: number;
    initializingMatchingRequest: InitializingMatchingRequest;
}

export interface SuccessMatchingRequest {
    matchingUuid: string;
    targetMatchingUuid: string;
}

export interface UpdateBothMatchingStatusRequest {
    matchingUuid: string;
    status: UpdateBothMatchingStatusStatusEnum;
}

export interface UpdateMatchingStatusRequest {
    matchingUuid: string;
    status: UpdateMatchingStatusStatusEnum;
}

/**
 * MatchingApi - interface
 * 
 * @export
 * @interface MatchingApiInterface
 */
export interface MatchingApiInterface {
    /**
     * API triggered when a match is found
     * @summary 매칭 FOUND API
     * @param {string} matchingUuid 
     * @param {string} targetMatchingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApiInterface
     */
    findMatchingRaw(requestParameters: FindMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMatchingFoundResponse>>;

    /**
     * API triggered when a match is found
     * 매칭 FOUND API
     */
    findMatching(requestParameters: FindMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMatchingFoundResponse>;

    /**
     * API for calculating and recording matching
     * @summary 매칭 우선순위 계산 및 기록 저장 API
     * @param {number} memberId 
     * @param {InitializingMatchingRequest} initializingMatchingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApiInterface
     */
    initializeMatchingRaw(requestParameters: InitializeMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePriorityListResponse>>;

    /**
     * API for calculating and recording matching
     * 매칭 우선순위 계산 및 기록 저장 API
     */
    initializeMatching(requestParameters: InitializeMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePriorityListResponse>;

    /**
     * API triggered when a match is succeed
     * @summary 매칭 SUCCESS API
     * @param {string} matchingUuid 
     * @param {string} targetMatchingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApiInterface
     */
    successMatchingRaw(requestParameters: SuccessMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API triggered when a match is succeed
     * 매칭 SUCCESS API
     */
    successMatching(requestParameters: SuccessMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for updating both matching status
     * @summary 나와 상대방 매칭 status 변경
     * @param {string} matchingUuid 
     * @param {'FAIL' | 'SUCCESS' | 'PENDING' | 'FOUND' | 'QUIT'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApiInterface
     */
    updateBothMatchingStatusRaw(requestParameters: UpdateBothMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for updating both matching status
     * 나와 상대방 매칭 status 변경
     */
    updateBothMatchingStatus(requestParameters: UpdateBothMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

    /**
     * API for updating my matching status
     * @summary 내 매칭 status 변경
     * @param {string} matchingUuid 
     * @param {'FAIL' | 'SUCCESS' | 'PENDING' | 'FOUND' | 'QUIT'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApiInterface
     */
    updateMatchingStatusRaw(requestParameters: UpdateMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>>;

    /**
     * API for updating my matching status
     * 내 매칭 status 변경
     */
    updateMatchingStatus(requestParameters: UpdateMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString>;

}

/**
 * 
 */
export class MatchingApi extends runtime.BaseAPI implements MatchingApiInterface {

    /**
     * API triggered when a match is found
     * 매칭 FOUND API
     */
    async findMatchingRaw(requestParameters: FindMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMatchingFoundResponse>> {
        if (requestParameters.matchingUuid === null || requestParameters.matchingUuid === undefined) {
            throw new runtime.RequiredError('matchingUuid','Required parameter requestParameters.matchingUuid was null or undefined when calling findMatching.');
        }

        if (requestParameters.targetMatchingUuid === null || requestParameters.targetMatchingUuid === undefined) {
            throw new runtime.RequiredError('targetMatchingUuid','Required parameter requestParameters.targetMatchingUuid was null or undefined when calling findMatching.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/matching/found/{matchingUuid}/{targetMatchingUuid}`.replace(`{${"matchingUuid"}}`, encodeURIComponent(String(requestParameters.matchingUuid))).replace(`{${"targetMatchingUuid"}}`, encodeURIComponent(String(requestParameters.targetMatchingUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API triggered when a match is found
     * 매칭 FOUND API
     */
    async findMatching(requestParameters: FindMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMatchingFoundResponse> {
        const response = await this.findMatchingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for calculating and recording matching
     * 매칭 우선순위 계산 및 기록 저장 API
     */
    async initializeMatchingRaw(requestParameters: InitializeMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePriorityListResponse>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling initializeMatching.');
        }

        if (requestParameters.initializingMatchingRequest === null || requestParameters.initializingMatchingRequest === undefined) {
            throw new runtime.RequiredError('initializingMatchingRequest','Required parameter requestParameters.initializingMatchingRequest was null or undefined when calling initializeMatching.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/matching/priority/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.initializingMatchingRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for calculating and recording matching
     * 매칭 우선순위 계산 및 기록 저장 API
     */
    async initializeMatching(requestParameters: InitializeMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePriorityListResponse> {
        const response = await this.initializeMatchingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API triggered when a match is succeed
     * 매칭 SUCCESS API
     */
    async successMatchingRaw(requestParameters: SuccessMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.matchingUuid === null || requestParameters.matchingUuid === undefined) {
            throw new runtime.RequiredError('matchingUuid','Required parameter requestParameters.matchingUuid was null or undefined when calling successMatching.');
        }

        if (requestParameters.targetMatchingUuid === null || requestParameters.targetMatchingUuid === undefined) {
            throw new runtime.RequiredError('targetMatchingUuid','Required parameter requestParameters.targetMatchingUuid was null or undefined when calling successMatching.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/matching/success/{matchingUuid}/{targetMatchingUuid}`.replace(`{${"matchingUuid"}}`, encodeURIComponent(String(requestParameters.matchingUuid))).replace(`{${"targetMatchingUuid"}}`, encodeURIComponent(String(requestParameters.targetMatchingUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API triggered when a match is succeed
     * 매칭 SUCCESS API
     */
    async successMatching(requestParameters: SuccessMatchingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.successMatchingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for updating both matching status
     * 나와 상대방 매칭 status 변경
     */
    async updateBothMatchingStatusRaw(requestParameters: UpdateBothMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.matchingUuid === null || requestParameters.matchingUuid === undefined) {
            throw new runtime.RequiredError('matchingUuid','Required parameter requestParameters.matchingUuid was null or undefined when calling updateBothMatchingStatus.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling updateBothMatchingStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/matching/status/target/{matchingUuid}/{status}`.replace(`{${"matchingUuid"}}`, encodeURIComponent(String(requestParameters.matchingUuid))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for updating both matching status
     * 나와 상대방 매칭 status 변경
     */
    async updateBothMatchingStatus(requestParameters: UpdateBothMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.updateBothMatchingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for updating my matching status
     * 내 매칭 status 변경
     */
    async updateMatchingStatusRaw(requestParameters: UpdateMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseString>> {
        if (requestParameters.matchingUuid === null || requestParameters.matchingUuid === undefined) {
            throw new runtime.RequiredError('matchingUuid','Required parameter requestParameters.matchingUuid was null or undefined when calling updateMatchingStatus.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling updateMatchingStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/internal/matching/status/{matchingUuid}/{status}`.replace(`{${"matchingUuid"}}`, encodeURIComponent(String(requestParameters.matchingUuid))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API for updating my matching status
     * 내 매칭 status 변경
     */
    async updateMatchingStatus(requestParameters: UpdateMatchingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseString> {
        const response = await this.updateMatchingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum UpdateBothMatchingStatusStatusEnum {
    Fail = 'FAIL',
    Success = 'SUCCESS',
    Pending = 'PENDING',
    Found = 'FOUND',
    Quit = 'QUIT'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateMatchingStatusStatusEnum {
    Fail = 'FAIL',
    Success = 'SUCCESS',
    Pending = 'PENDING',
    Found = 'FOUND',
    Quit = 'QUIT'
}
